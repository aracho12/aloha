"""
Module for reading COHPCAR/COOPCAR files generated by LOBSTER.
Distributed under the terms of the MIT License
ref: https://github.com/materialsproject/pymatgen/blob/master/pymatgen/io/lobster/outputs.py

Ara Cho @SUNCAT/Stanford
Jul 1, 2023
"""

from monty.io import zopen
import numpy as np
import re
from ase.io import read
from mendeleev import element
from monty.json import MSONable
from scipy.interpolate import InterpolatedUnivariateSpline
import pandas as pd
from itertools import chain

pd.set_option('display.expand_frame_repr', False)
pd.set_option('display.max_columns', None)
pd.set_option('display.max_colwidth', None)
pd.set_option('display.max_rows', None)
np.set_printoptions(precision=5)
orbital_order={'1s':0,'2s':1,'2p':2,'3s':3,'3p':4,'4s':5,'3d':6,'4p':7,'5s':8,'4d':9,'5p':10,'6s':11,'4f':12,
               '5d':13,'6p':14,'7s':15,'5f':16,'6d':17,'7p':18}
metal_elements = ['Li', 'Be', 'Na', 'Mg', 'Al', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi']


class Cohp(MSONable):
    """ COHP object """
    def __init__(self, efermi, energies, cohp, icohp=None, data_label=None, icohp_fermi=None, summed_spin=None):
        self.efermi = efermi
        self.energies = np.array(energies)
        self.cohp = cohp
        self.icohp = icohp
        self.data_label = data_label
        self.icohp_fermi = icohp_fermi
        self.summed_spin = summed_spin

class Cohpout:
    def __init__(self, filepath='.',):
        self.COHPCAR_file=filepath+'/COHPCAR.lobster'
        self.POSCAR_file=filepath+'/POSCAR'
        self.atoms = read(self.POSCAR_file)
        self._get_cohp_data()
        self.dict=self._dict()

    def _get_cohp_data(self):
        """
        ref: https://github.com/materialsproject/pymatgen/blob/master/pymatgen/io/lobster/outputs.py
        modified based on the pymatgen source code
        read COHPCAR.lobster generated by LOBSTER

        .. attribute: cohp_data
            Dict that contains the COHP data of the form:
            {bond: {"COHP": {"Spin.up": cohps, "Spin.down":cohps},
                    "ICOHP": {"Spin.up": icohps, "Spin.down": icohps},
                    "length": bond length,
                    "sites": sites corresponding to the bond}
            Also contains an entry for the average, which does not have
            a "length" key.
        .. attribute: efermi
            The Fermi energy in eV.
        .. attribute: energies
            Sequence of energies in eV. Note that LOBSTER shifts the energies
            so that the Fermi energy is at zero.
        .. attribute: is_spin_polarized
            Boolean to indicate if the calculation is spin polarized.
        .. attribute: orb_cohp
            orb_cohp[label] = {bond_data["orb_label"]: {"COHP": {Spin.up: cohps, Spin.down:cohps},
                                                        "ICOHP": {Spin.up: icohps, Spin.down: icohps},
                                                        "orbitals": orbitals,
                                                        "length": bond lengths,
                                                        "sites": sites corresponding to the bond}}
    
        """

        with zopen(self.COHPCAR_file, "rt") as f:
            contents = f.read().split("\n")

        parameters = contents[1].split()
        if int(parameters[1]) == 2:
            spins = ["Spin.up", "Spin.down"]
            self.is_spin = True
        else:
            spins = ["Spin.up"]
            self.is_spin = False

        num_bonds = int(parameters[0]) - 1
        self.efermi = float(parameters[-1])
        data = np.array([np.array(row.split(), dtype=float) for row in contents[num_bonds + 3 :]]).transpose()
        self.energies = data[0]
        cohp_data= {
                    "average": {
                        "COHP": {spin: data[1 + 2 * s * (num_bonds + 1)] for s, spin in enumerate(spins)},
                        "ICOHP": {spin: data[2 + 2 * s * (num_bonds + 1)] for s, spin in enumerate(spins)},
                    }
                }
        
        orb_cohp = {}
        bondnumber = 0

        for bond in range(num_bonds):

            bond_data = self._get_bond_data(line=contents[3 + bond])

            label = str(bondnumber)

            orbs = bond_data["orbitals"]
            cohp = {spin: data[2 * (bond + s * (num_bonds + 1)) + 3] for s, spin in enumerate(spins)}
            icohp = {spin: data[2 * (bond + s * (num_bonds + 1)) + 4] for s, spin in enumerate(spins)}

            if orbs is None:
                bondnumber = bondnumber + 1
                label = str(bondnumber)
                cohp_data[label] = {
                    "COHP": cohp,
                    "ICOHP": icohp,
                    "length": bond_data["length"],
                    "sites": bond_data["sites"],
                    "elements": bond_data["elements"],
                }

            elif label in orb_cohp:
                orb_cohp[label].update(
                    {
                        bond_data["orb_label"]: {
                            "COHP": cohp,
                            "ICOHP": icohp,
                            "orbitals": orbs,
                            "length": bond_data["length"],
                            "sites": bond_data["sites"],
                            "elements": bond_data["elements"],
                        }
                    }
                )
            else:
                orb_cohp[label] = {
                    bond_data["orb_label"]: {
                        "COHP": cohp,
                        "ICOHP": icohp,
                        "orbitals": orbs,
                        "length": bond_data["length"],
                        "sites": bond_data["sites"],
                        "elements": bond_data["elements"],
                    }
                }

        self.orb_res_cohp = orb_cohp or None
        self.cohp_data = cohp_data

    def _get_bond_data(self, line: str) -> dict:
        """
        ref: https://github.com/materialsproject/pymatgen/blob/master/pymatgen/io/lobster/outputs.py
        Subroutine to extract bond label, site indices, and length from
        a LOBSTER header line. The site indices are zero-based, so they
        can be easily used with a Structure object.
        Example header line: No.4:Fe1->Fe9(2.4524893531900283)
        Example header line for orbtial-resolved COHP:
            No.1:Fe1[3p_x]->Fe2[3d_x^2-y^2](2.456180552772262)
        Args:
            line: line in the COHPCAR header describing the bond.
        Returns:
            Dict with the bond label, the bond length, a tuple of the site
            indices, a tuple containing the orbitals (if orbital-resolved),
            and a label for the orbitals (if orbital-resolved).
        """
        line_new = line.rsplit("(", 1)
        length = float(line_new[-1][:-1])

        sites = line_new[0].replace("->", ":").split(":")[1:3]
        site_indices = tuple(int(re.split(r"\D+", site)[1]) - 1 for site in sites) # index start from 0
        elements = (self.atoms[site_indices[0]].symbol, self.atoms[site_indices[1]].symbol)
        #print(elements)

        if "[" in sites[0]:
            orbs = [re.findall(r"\[(.*)\]", site)[0] for site in sites]
            orb_label, orbitals = self._get_orb_from_str(orbs)

        else:
            orbitals = orb_label = None

        return {
            "length": length,
            "sites": site_indices,
            "orbitals": orbitals,
            "orb_label": orb_label,
            "elements": elements,
        }
    
    def _get_orb_from_str(self, orbs):
        """
        Args:
            orbs: list of two str, e.g. ["2p_x", "3s"].
        Returns:
            list of tuple of int and str, e.g. [(2, "px", 3), (3, "s", 0)].
        """
        orb_labs = {
            "s": (0, 's'),
            "p_y": (1, 'py'),
            "p_z": (2, 'pz'),
            "p_x": (3, 'px'),
            "d_xy": (4, 'dxy'),
            "d_yz": (5, 'dyz'),
            "d_z^2": (6, 'dz2'),
            "d_xz": (7, 'dxz'),
            "d_x^2-y^2": (8, 'dx2'),
            "f_y(3x^2-y^2)": (9, 'f_3'),
            "f_xyz": (10, 'f_2'),
            "f_yz^2": (11, 'f_1'),
            "f_z^3": (12, 'f0'),
            "f_xz^2": (13, 'f1'),
            "f_z(x^2-y^2)": (14, 'f2'),
            "f_x(x^2-3y^2)": (15, 'f3'),            
        }
        orbitals = [(int(orb[0]), orb_labs[orb[1:]]) for orb in orbs]
        orb_label = f"{orbitals[0][0]}{orbitals[0][1][1]}-{orbitals[1][0]}{orbitals[1][1][1]}"  # type: ignore
        orbitals = [(orbitals[0][0], orbitals[0][1][1], orbitals[0][1][0]), (orbitals[1][0], orbitals[1][1][1], orbitals[1][1][0])]
        return orb_label, orbitals
    
    def _dict(self, summed_spin=True):
        d={}
        for i in range(len(self.cohp_data)-1):
            label=str(i+1)
            d[label]={}
            d[label]['label']=label
            d[label]['distance']=self.cohp_data[label]['length']
            d[label]['ele1']=self.cohp_data[label]['elements'][0]
            d[label]['ele2']=self.cohp_data[label]['elements'][1]
            d[label]['idx1']=self.cohp_data[label]['sites'][0]
            d[label]['idx2']=self.cohp_data[label]['sites'][1]
            d[label]['pair']=(f"{d[label]['ele1']}{d[label]['idx1']}",f"{d[label]['ele2']}{d[label]['idx2']}")
            d[label]['dat_label']=f"{d[label]['pair'][0]}-{d[label]['pair'][1]}"
            d[label]['icohp']=self._get_icohp_fermi(label, icohps=self.cohp_data[label]['ICOHP'], summed_spin=summed_spin)
            d[label]['orb']=self.orb_res_cohp[label]
            
            for j, idx in enumerate(self.cohp_data[label]['sites']):
                orb_temp=[]
                orb_temp.extend(self.orb_res_cohp[label][orb]['orbitals'][j] for orb in self.orb_res_cohp[label])
                orb_temp=list(set(orb_temp))
                d[label][f"{self.cohp_data[label]['elements'][j]}{idx}"]=sorted(orb_temp, key=lambda x : (orbital_order[str(x[0])+str(x[1][0])], x[2]))
                
        return d

    def _get_icohp_fermi(self, label, icohps, summed_spin=True):
        summedicohp={}
        if summed_spin and 'Spin.down' in icohps:
            summedicohp['Spin.up'] = icohps['Spin.up'] + icohps['Spin.down']
        else:
            summedicohp = icohps
        spl_spinup = InterpolatedUnivariateSpline(self.energies, summedicohp['Spin.up'], ext=0)
        if not summed_spin and 'Spin.down' in icohps:
            spl_spindown = InterpolatedUnivariateSpline(self.energies, icohps['Spin.down'], ext=0)
            icohp_fermi={'Spin.up': -spl_spinup(0.0), 'Spin.down': -spl_spindown(0.0)}
        if summed_spin:
            icohp_fermi=-spl_spinup(0.0)
        return icohp_fermi

    def _get_pcohp(self, label, orbital=None, summed_spin=True):

        porb_label = []
        porb_data = []
        data_label = []
        label_list = []
        orbital_list = []

        elements = self.cohp_data[label]['elements']
        pairs = self.dict[label]['pair']
        if orbital is None:
            e_temp = []
            #default: outermost orbitals
            for pair in pairs:
                orbs = self.dict[label][pair]
                orb_default = orbs[-1][1][0]
                porb_label.append(orb_default)
                e_temp.append([orb for orb in orbs if orb[1][0] == orb_default])
            orb1, orb2 = e_temp
            orbital_list = [f"{x[0]}{x[1]}-{y[0]}{y[1]}" for x in orb1 for y in orb2]
            label_list = [label for _ in range(len(orbital_list))]
            data_label = [f'{pairs[0]}({porb_label[0]})-{pairs[1]}({porb_label[1]})']

        if isinstance(orbital, dict):
            orbital_keys = orbital.keys()
            keys_only_in_orbital = set(orbital_keys) - set(elements)
            if len(keys_only_in_orbital) > 0:
                raise ValueError(f"Elements {keys_only_in_orbital} are not in the bond {elements}.")

            if any(elem in orbital_keys for elem in elements):
                for element, pair in zip(elements, pairs):
                    if element in orbital.keys():
                        data_temp1 = []
                        label_temp1 = []
                        if isinstance(orbital[element], str):
                            orbital[element] = [orbital[element]]
                        if isinstance(orbital[element], (list, tuple)):
                            for p_orb in orbital[element]:
                                p_orb = str(p_orb)
                                data_temp2, label_temp2 = self._get_specific_orbital_list(label, p_orb, pair)
                                data_temp1.append(data_temp2)
                                label_temp1.append(label_temp2)
                                if p_orb in ['s','p','d','f']:
                                    data_temp1=data_temp1[0]
                                    label_temp1=label_temp1[0]
                            porb_data.append(data_temp1)
                            porb_label.append(label_temp1)
                    else:
                        orbs = self.dict[label][pair]
                        orb_default = orbs[-1][1][0]
                        porb_label.append([[orb_default]])
                        porb_data.append([[orb for orb in orbs if orb[1][0] == orb_default]])

                orb1, name1 = porb_data[0], porb_label[0]
                orb2, name2 = porb_data[1], porb_label[1]

                for i, x in enumerate(orb1):
                    for j, y in enumerate(orb2):
                        orbital_temp = [f"{x_orb[0]}{x_orb[1]}-{y_orb[0]}{y_orb[1]}" for x_orb in x for y_orb in y]
                        orbital_list.append(orbital_temp)
                        label_list.append([label for _ in range(len(orbital_temp))])
                        data_label.append(f'{pairs[0]}({name1[i][0]})-{pairs[1]}({name2[j][0]})')

        # print("orbital_list:", orbital_list)
        # print("label_list:", label_list)
        # print("data_label:", data_label)
                    
        return data_label, label_list, orbital_list

    def _get_specific_orbital_list(self, label, p_orb, pair):
        e_temp = []
        porb = [] # for data_label
        if p_orb in ['s','p','d','f']:
            porb.extend([[orb[1]] for orb in self.dict[label][pair] if orb[1][0] == p_orb])
            e_temp.extend([[orb] for orb in self.dict[label][pair] if orb[1][0] == p_orb])
            #porb = porb[0]
            #e_temp = e_temp[0]
        elif p_orb in ['t2g','eg']:
            porb.append(p_orb)
            if p_orb == 't2g':
                e_temp.extend([orb for orb in self.dict[label][pair] if orb[1] in ['dxy','dyz','dxz']])
            elif p_orb == 'eg':
                e_temp.extend([orb for orb in self.dict[label][pair] if orb[1] in ['dz2','dx2']])
        else:
            porb.append(p_orb)
            e_temp.extend([orb for orb in self.dict[label][pair] if orb[1] == p_orb])
        return e_temp, porb

    def _get_summed_cohp_by_label_and_orbital_list(self, label_list, orbital_list, summed_spin=True):

        if not len(label_list) == len(orbital_list):
            raise ValueError("label_list and orbital_list must have the same length.")
        
        summed_cohp = self.dict[label_list[0]]['orb'][orbital_list[0]]['COHP']
        summed_icohp = self.dict[label_list[0]]['orb'][orbital_list[0]]['ICOHP']
        for i, label in enumerate(label_list[1:],1):
            cohp_temp = self.dict[label]['orb'][orbital_list[i]]['COHP']
            icohp_temp = self.dict[label]['orb'][orbital_list[i]]['ICOHP']
            summed_cohp['Spin.up'] += cohp_temp['Spin.up']
            if "Spin.down" in summed_cohp:
                summed_cohp['Spin.down'] += cohp_temp['Spin.down']
            summed_icohp['Spin.up'] += icohp_temp['Spin.up']
            if "Spin.down" in summed_icohp:
                summed_icohp['Spin.down'] += icohp_temp['Spin.down']

        if summed_spin:
            final_cohp={}
            final_icohp={}
            final_cohp['Spin.up'] = summed_cohp['Spin.up'] + summed_cohp['Spin.down']
            final_icohp['Spin.up'] = summed_icohp['Spin.up'] + summed_icohp['Spin.down']
        else:
            final_cohp = summed_cohp
            final_icohp = summed_icohp

        return final_cohp, final_icohp

    def print_all(self, sort_by=None):
        """Print all labels and ICOHP values for all orbitals."""
        # change column name of self.dataframe
        df=pd.DataFrame(self.dict).T
        df=df.rename(columns={'icohp':'-ICOHP'})
        new_columns = ['label', 'ele1', 'idx1', 'ele2', 'idx2', 'dat_label', '-ICOHP', 'distance']
        df = df.reindex(columns=new_columns)
        if sort_by is not None:
            df = df.sort_values(by=[sort_by,'label'])
        print(df.to_string(index=False))
        print(f"ICOHP sum: {df['-ICOHP'].sum():.5f}")

    def pcohp(self, label=None, orbital=None, summed_spin=True, sort_by=None, index=None, symbol=None, print_df=True):
        pcohp={}
        if symbol is not None and index is not None:
            raise ValueError("Only one of index and symbol can be specified.")
            
        if isinstance(index, int):
            labels=[]
            for label in self.dict.keys():
                if index in [ self.dict[label]['idx1'], self.dict[label]['idx2']]:
                    labels.append(label)
        elif isinstance(symbol, str):
            labels=[]
            for label in self.dict.keys():
                if symbol in [ self.dict[label]['ele1'], self.dict[label]['ele2']]:
                    labels.append(label)
        elif label is None:
            labels=list(self.dict.keys())
        elif isinstance(label, str):
            labels=[label]
        elif isinstance(label, list):
            labels=label

        data=[]
        icohp_sum={}
        for label in labels:
            icohp_sum[label]={'Spin.up':[]} if summed_spin else {'Spin.up':[],'Spin.down':[]}
            label = str(label)
            pcohp[label]={}
            data_label, label_list, orbital_list=self._get_pcohp(label,orbital=orbital, summed_spin=summed_spin)
            if not isinstance(label_list[0], list):
                label_list=[label_list]
                orbital_list=[orbital_list]

            for i in range(len(label_list)):
                summed_cohp, summed_icohp = self._get_summed_cohp_by_label_and_orbital_list(label_list[i], orbital_list[i], summed_spin=summed_spin)
                icohp_fermi=self._get_icohp_fermi(label, icohps=summed_icohp, summed_spin=summed_spin)
                pcohp[label][i]={} # for plotting
                row={}
                row['label']=label
                row['ele1']=self.dict[label]['ele1']
                row['idx1']=self.dict[label]['idx1']
                row['ele2']=self.dict[label]['ele2']
                row['idx2']=self.dict[label]['idx2']
                row['pair']=data_label[i]
                
                pcohp[label][i]=Cohp(efermi=self.efermi,
                                     energies=self.energies,
                                     cohp=summed_cohp,
                                     icohp=summed_icohp,
                                     data_label=data_label[i],
                                     icohp_fermi=icohp_fermi,
                                     summed_spin=summed_spin)

                if summed_spin:
                    row['-ICOHP']=icohp_fermi
                    icohp_sum[label]['Spin.up'].append(icohp_fermi)
                else:
                    row['-ICOHP(up)']=icohp_fermi['Spin.up']
                    row['-ICOHP(down)']=icohp_fermi['Spin.down']
                    icohp_sum[label]['Spin.up'].append(icohp_fermi['Spin.up'])
                    icohp_sum[label]['Spin.down'].append(icohp_fermi['Spin.down'])
                row['distance']=self.dict[label]['distance']
                data.append(row)
            
        df=pd.DataFrame(data)
        if sort_by is not None:
            if isinstance(sort_by, list):
                sort_by.append('label')
            df = df.sort_values(by=[sort_by,'label'])
        if print_df: 
            print(df.to_string(index=False))
            if summed_spin:
                print(f"\t\t\t\t-ICOHP sum:{df['-ICOHP'].sum():.5f}")
            else:
                print(f"\t\t\t\t-ICOHP sum:{df['-ICOHP(up)'].sum():.5f}\t{df['-ICOHP(down)'].sum():.5f}")
        
        return pcohp

if __name__ == "__main__":
    pass
